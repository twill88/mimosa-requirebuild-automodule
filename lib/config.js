"use strict";
exports.defaults = function() {
  return {
    requireBuildAutoModule: {
      patterns: ["**/*.js"],
      exclude: [/-built.js$/, /reload-client.js$/],
      dontBuild: ["specs"],
      modules: [
        {
          name: "app/app-built",
          baseUrl: "app",
          include: [],
          patterns: [],
          exclude: [],
          versionOf: ""
        }
      ]
    }
  };
};

exports.placeholder = function() {
  return "\t\n\n  # requireBuildAutoModule:\n    # patterns: []                     # Patterns to match files for inclusion. By default,\n                                       # this matches all javascript files. An alternative\n                                       # is to have this only match your main.js file, and\n                                       # let r.js detect and include any required dependencies\n\n    # exclude: []                      # A list of regexes or strings used to prevent the\n                                       # inclusion of matching files.\n\n    # dontBuild: []                    # A list patterns used to prevent building matched folders\n                                       # into modules. The module configs are still generated \n                                       # for use if the excluded modules are included in another\n                                       # module. By default this excludes spec directories.\n\n    # modules: [{                      # The modules list is dynamically built, but you can\n                                       # add module configs here to override default behaviour.\n                                       # The entries that are automatically added are named as\n                                       # \"folderName/folderName-built\"\n\n    #   name: \"\"                       # Name of the module. If the name matches that of a\n                                       # module specified in the r.js config, that config is\n                                       # augmented using the values generated by this plugin.\n                                       # Otherwise, it creates a new module config that it injects \n                                       # in the r.js config.\n\n    #   baseUrl: \"\"                    # The baseUrl is automatically detected by the plugin,\n                                       # but this allows you to override it if you are setting up\n                                       # up a custom config for this module. The baseUrl is also\n                                       # used to make sure that duplicate modules aren't created\n                                       # for the same folder.\n\n    #   include: []                    # An array of strings used to find other modules to build\n                                       # into this module. Will try to match name or baseUrl.\n\n    #   patterns: []                   # Patterns to match files for inclusion. If not specified\n                                       # here, uses the patterns specified above. Must be\n                                       # specified here or above.\n\n    #   exclude: []                    # List of regexes or strings to prevent files from\n                                       # being included. If not specified here, uses the exclude\n                                       # specified above. Must be specified here or above.\n\n    #   versionOf: \"\"                  # A string used to match the baseUrl or name of another\n                                       # module. If a match is found, this module is built by\n                                       # aliasing all of it's files to the baseUrl of the matched\n                                       # module. If you have a scenario like:\n                                       # moduleC is a version of moduleB is a version of moduleA\n                                       # Then, moduleC's files are aliased to the baseUrl of moduleA\n\n    #   includeAliasedFiles: true      # If true, adds the aliased files to the module's include \n                                       # array, causing them to be built into the final module.\n    # }]";
};

exports.validate = function(config, validators) {
  var errors, moduleConfig, _i, _len, _ref;
  errors = [];
  if (validators.ifExistsIsObject(errors, "requireBuildAutoModule config", config.requireBuildAutoModule)) {
    validators.ifExistsIsArrayOfStrings(errors, "requireBuildAutoModule.patterns", config.requireBuildAutoModule.patterns);
    validators.ifExistsFileExcludeWithRegexAndString(errors, "requireBuildAutoModule.exclude", config.requireBuildAutoModule, config.watch.compiledDir);
    validators.ifExistsIsArrayOfStrings(errors, "requireBuildAutoModule.dontBuild", config.requireBuildAutoModule.dontBuild);
    if (validators.ifExistsIsArrayOfObjects(errors, "requireBuildAutoModule.modules", config.requireBuildAutoModule.modules)) {
      _ref = config.requireBuildAutoModule.modules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        moduleConfig = _ref[_i];
        validators.stringMustExist(errors, "requireBuildAutoModule.modules.name", moduleConfig.name);
        validators.ifExistsIsString(errors, "requireBuildAutoModule.modules.baseUrl", moduleConfig.baseUrl);
        validators.ifExistsIsArrayOfStrings(errors, "requireBuildAutoModule.modules.include", moduleConfig.include);
        if (!validators.ifExistsIsArrayOfStrings(errors, "requireBuildAutoModule.modules.patterns", moduleConfig.patterns)) {
          if (validators.isArrayOfStringsMustExist(errors, "requireBuildAutoModule.patterns", config.requireBuildAutoModule.patterns)) {
            moduleConfig.patterns = config.requireBuildAutoModule.patterns;
          }
        }
        if (!validators.ifExistsFileExcludeWithRegexAndString(errors, "requireBuildAutoModule.modules.exclude", moduleConfig, config.watch.compiledDir)) {
          moduleConfig.exclude = config.requireBuildAutoModule.exclude;
        }
        validators.ifExistsIsString(errors, "requireBuildAutoModule.modules.versionOf", moduleConfig.versionOf);
        if (!validators.ifExistsIsBoolean(errors, "requireBuildAutoModule.modules.includeAliasedFiles", moduleConfig.includeAliasedFiles)) {
          moduleConfig.includeAliasedFiles = true;
        }
      }
    }
  }
  return errors;
};

//@ sourceMappingURL=data:application/json;base64,
