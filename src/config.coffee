"use strict"

exports.defaults = ->
  requireBuildAutoModule:
    patterns: ["**/*.js"]
    exclude: [/-built.js$/,/reload-client.js$/]
    dontBuild: ["specs"]
    plugins: [{
      path: "vendor/requirejs-text/text"
      patterns: ["**/*.html"]
    }]
    modules: [{
      name: "app/app-built"
      baseUrl: "app"
      include: []
      patterns: []
      exclude: []
      versionOf: ""
    }]

exports.placeholder = ->
  """
  \t

    # requireBuildAutoModule:
      # patterns: []                     # Patterns to match files for inclusion. By default,
                                         # this matches all javascript files. An alternative
                                         # is to have this only match your main.js file, and
                                         # let r.js detect and include any required dependencies

      # exclude: []                      # A list of regexes or strings used to prevent the
                                         # inclusion of matching files.

      # dontBuild: []                    # A list patterns used to prevent building matched folders
                                         # into modules. The module configs are still generated 
                                         # for use if the excluded modules are included in another
                                         # module. By default this excludes spec directories.

      # plugins: [{                      # An array of plugin configs. This allows you to load
                                         # specific files using requirejs plugins. An example is
                                         # the text plugin for loading html files.

      #   path: ""                       # The path to the plugin to be used. Should be relative
                                         # to the javascriptsDir. If the file is aliased in your 
                                         # requirejs config, the alias will be used instead.

      #   patterns: []                   # Patterns to match files to be loaded using this plugin.
                                         # Any files matched for a specific plugin will only be
                                         # included using that plugin.
      # }]

      # modules: [{                      # The modules list is dynamically built, but you can
                                         # add module configs here to override default behaviour.
                                         # The entries that are automatically added are named as
                                         # "folderName/folderName-built"

      #   name: ""                       # Name of the module. If the name matches that of a
                                         # module specified in the r.js config, that config is
                                         # augmented using the values generated by this plugin.
                                         # Otherwise, it creates a new module config that it injects 
                                         # in the r.js config.

      #   baseUrl: ""                    # The baseUrl is automatically detected by the plugin,
                                         # but this allows you to override it if you are setting up
                                         # up a custom config for this module. The baseUrl is also
                                         # used to make sure that duplicate modules aren't created
                                         # for the same folder.

      #   include: []                    # An array of strings used to find other modules to build
                                         # into this module. Will try to match name or baseUrl.

      #   patterns: []                   # Patterns to match files for inclusion. If not specified
                                         # here, uses the patterns specified above. Must be
                                         # specified here or above.

      #   exclude: []                    # List of regexes or strings to prevent files from
                                         # being included. If not specified here, uses the exclude
                                         # specified above. Must be specified here or above.

      #   plugins: [{                    # This allows you to specify a differnet set of plugin
                                         # configs for this specific module. Each config should
                                         # have a path and a patterns array specified.
      #   }]

      #   versionOf: ""                  # A string used to match the baseUrl or name of another
                                         # module. If a match is found, this module is built by
                                         # aliasing all of it's files to the baseUrl of the matched
                                         # module. If you have a scenario like:
                                         # moduleC is a version of moduleB is a version of moduleA
                                         # Then, moduleC's files are aliased to the baseUrl of moduleA

      #   includeAliasedFiles: true      # If true, adds the aliased files to the module's include 
                                         # array, causing them to be built into the final module.
      # }]
  """

exports.validate = (config, validators) ->
  errors = []
  if validators.ifExistsIsObject(errors, "requireBuildAutoModule config", config.requireBuildAutoModule)
    validators.ifExistsIsArrayOfStrings(errors, "requireBuildAutoModule.patterns", config.requireBuildAutoModule.patterns)
    validators.ifExistsFileExcludeWithRegexAndString(errors, "requireBuildAutoModule.exclude", config.requireBuildAutoModule, config.watch.compiledDir)
    validators.ifExistsIsArrayOfStrings(errors, "requireBuildAutoModule.dontBuild", config.requireBuildAutoModule.dontBuild)
    if validators.ifExistsIsArrayOfObjects(errors, "requireBuildAutoModule.plugins", config.requireBuildAutoModule.plugins)
      for pluginConfig in config.requireBuildAutoModule.plugins
        validators.stringMustExist(errors, "requireBuildAutoModule.plugins.path", pluginConfig.path)
        validators.isArrayOfStringsMustExist(errors, "requireBuildAutoModule.plugins.patterns", pluginConfig.patterns)
    if validators.ifExistsIsArrayOfObjects(errors, "requireBuildAutoModule.modules", config.requireBuildAutoModule.modules)
      for moduleConfig in config.requireBuildAutoModule.modules
        validators.stringMustExist(errors, "requireBuildAutoModule.modules.name", moduleConfig.name)
        validators.ifExistsIsString(errors, "requireBuildAutoModule.modules.baseUrl", moduleConfig.baseUrl)
        validators.ifExistsIsArrayOfStrings(errors, "requireBuildAutoModule.modules.include", moduleConfig.include)
        unless validators.ifExistsIsArrayOfStrings(errors, "requireBuildAutoModule.modules.patterns", moduleConfig.patterns)
          if validators.isArrayOfStringsMustExist(errors, "requireBuildAutoModule.patterns", config.requireBuildAutoModule.patterns)
            moduleConfig.patterns = config.requireBuildAutoModule.patterns
        unless validators.ifExistsFileExcludeWithRegexAndString(errors, "requireBuildAutoModule.modules.exclude", moduleConfig, config.watch.compiledDir)
          moduleConfig.exclude = config.requireBuildAutoModule.exclude
        if validators.ifExistsIsArrayOfObjects(errors, "requireBuildAutoModule.modules.plugins", moduleConfig.plugins)
          for pluginConfig in moduleConfig.plugins
            validators.stringMustExist(errors, "requireBuildAutoModule.modules.plugins.path", pluginConfig.path)
            validators.isArrayOfStringsMustExist(errors, "requireBuildAutoModule.modules.plugins.patterns", pluginConfig.patterns)
        else
          moduleConfig.plugins = config.requireBuildAutoModule.plugins
        validators.ifExistsIsString(errors, "requireBuildAutoModule.modules.versionOf", moduleConfig.versionOf)
        unless validators.ifExistsIsBoolean(errors, "requireBuildAutoModule.modules.includeAliasedFiles", moduleConfig.includeAliasedFiles)
          moduleConfig.includeAliasedFiles = true

  errors
